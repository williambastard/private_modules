{"version":3,"sources":["../src/index.ts","../src/api_parser/api_parser.ts","../src/api_parser/api_constantes.ts","../src/api_fetcher/api_fetcher.ts"],"sourcesContent":["import { ApiConstructor } from \"./api_parser/api_parser\"\r\nimport ApiDefaultResponse from \"./api_parser/api_constantes\"\r\nimport ApiFetcher from \"./api_fetcher/api_fetcher\"\r\n\r\nexport default { ApiConstructor, ApiFetcher, ApiDefaultResponse };","import { Response } from \"express\";\r\nimport ApiInterface from \"./api_interface\";\r\n\r\nexport class ApiConstructor {\r\n    _response!: Response;\r\n    _responseAPI?: ApiInterface;\r\n\r\n    constructor(_response: Response) {\r\n        this._response = _response\r\n        return this;\r\n    }\r\n    setResponse(_responseAPI: ApiInterface) {\r\n        this._responseAPI = _responseAPI;\r\n        return this;\r\n    }\r\n    sendResponse() {\r\n        return this._response.status(this._responseAPI!.statusCode).json(this._responseAPI);\r\n    }\r\n}","import ApiInterface from \"./api_interface\";\r\nexport abstract class ApiResponseMap {\r\n    static map: Map<string, Object> = new Map([\r\n        [\"HTTP_400\", { statusCode: 400, message: \"Bad Request\" }],\r\n        [\"HTTP_401\", { statusCode: 401, message: \"Unauthorized\" }],\r\n        [\"HTTP_402\", { statusCode: 402, message: \"Payment Required\" }],\r\n        [\"HTTP_403\", { statusCode: 403, message: \"Forbidden\" }],\r\n        [\"HTTP_404\", { statusCode: 404, message: \"Not Found\" }],\r\n        [\"HTTP_405\", { statusCode: 405, message: \"Not Allowed\" }],\r\n        [\"HTTP_406\", { statusCode: 406, message: \"Not Acceptable\" }],\r\n        [\"HTTP_407\", { statusCode: 407, message: \"Proxy Authentication required\" }],\r\n        [\"HTTP_498\", { statusCode: 498, message: \"Token expired / invalid\" }],\r\n\r\n        [\"HTTP_500\", { statusCode: 500, message: \"Internal Server Error\" }],\r\n        [\"HTTP_501\", { statusCode: 501, message: \"Not Implemented\" }],\r\n        [\"HTTP_502\", { statusCode: 502, message: \"Bad Gateway\" }],\r\n        [\"HTTP_503\", { statusCode: 503, message: \"Service Unavailable\" }],\r\n        [\"HTTP_504\", { statusCode: 504, message: \"Gateway Timeout\" }],\r\n\r\n        [\"HTTP_200\", { statusCode: 200, message: \"Success\", data: {} }],\r\n        [\"HTTP_201\", { statusCode: 201, message: \"Created\", data: {} }],\r\n        [\"HTTP_202\", { statusCode: 202, message: \"Accepted\", data: {} }],\r\n        [\"HTTP_204\", { statusCode: 204, message: \"No Content\", data: {} }],\r\n        [\"HTTp_205\", { statusCode: 205, message: \"Reset Content\", data: {} }],\r\n        [\"HTTP_206\", { statusCode: 206, message: \"Partial Content\", data: {} }],\r\n        [\"HTTP_208\", { statusCode: 208, message: \"Already Reported\", data: {} }],\r\n        [\"ERROR\", { statusCode: 500, message: \"\\\"{CODE}\\\" Not found in default ApiDefaultResponse\", data: {} }],\r\n    ])\r\n}\r\nexport default abstract class ApiDefaultResponse implements ApiInterface {\r\n    statusCode!: number;\r\n    message!: string;\r\n    token?: string | undefined;\r\n    data?: object | undefined;\r\n    details?: unknown;\r\n\r\n\r\n    static get(key: string): ApiInterface {\r\n        const error = JSON.parse(JSON.stringify(ApiResponseMap.map.get(\"ERROR\")!)).message.replace(\"{CODE}\", key);\r\n        const get = ApiResponseMap.map.get(key) ?? error;\r\n        return get as ApiInterface;\r\n    }\r\n}","import { Request } from \"express\";\r\nimport { ApiFetcherInterface } from \"./api_fetcher.interface\";\r\n\r\nexport default class ApiFetcher implements ApiFetcherInterface {\r\n    _request: Request;\r\n    _headers: Headers = new Headers();\r\n    _options: Object = {};\r\n\r\n    constructor(_request: Request, _target: string) {\r\n        this._request = _request;\r\n        this.initHeader(_request, _target);\r\n    }\r\n    async fetch(): Promise<Object> {\r\n        const response = await fetch(`${this.getTarget()}`, this.getFetchOptions())\r\n        const _ms_response = await response.json();\r\n        return _ms_response ?? {};\r\n    }\r\n\r\n\r\n    initHeader(_request: Request, _target: string) {\r\n        this.setHeaderKey('origin', _request.header('origin') ?? \"\");\r\n        this.setHeaderKey('token', _request.get('token') ?? '');\r\n        this.setHeaderKey('author', 'William BASTARD');\r\n        this.setHeaderKey('content-type', 'application/json');\r\n\r\n        this.setHeaderKey('ms-user-method', _request.method);\r\n        this.setHeaderKey('ms-target-service', _target);\r\n        this.setHeaderKey('ms-target-protocol', 'http');\r\n        this.setHeaderKey('ms-target-host', 'service.riptest:8282');\r\n        this.setHeaderKey('ms-target-endpoint', _request.url.replace('/', ''));\r\n    }\r\n\r\n    initFetchOptions() {\r\n        this.setFetchOption(this._headers);\r\n        this.setFetchOption({ \"method\": this._request.method });\r\n        this.setFetchOption({ \"body\": this._request.body });\r\n    }\r\n\r\n    setHeaderKey(headerKey: string, headerValue: string) {\r\n        this._headers.set(headerKey, headerValue);\r\n    }\r\n    setFetchOption(_fetchOptionObject: Object) {\r\n        Object.assign(this._options, _fetchOptionObject);\r\n    }\r\n\r\n    getHeaderKey(headerKey: string) {\r\n        return this._headers.get(headerKey);\r\n    }\r\n    getTarget() {\r\n        return this.getHeaderKey(\"ms-target-protocol\") +\r\n            \"://\" + this.getHeaderKey(\"ms-target-service\") +\r\n            \".\" + this.getHeaderKey(\"ms-target-host\") +\r\n            \"/\" + this.getHeaderKey(\"ms-target-service\") +\r\n            \"/\" + this.getHeaderKey('ms-target-endpoint');\r\n    }\r\n\r\n    getFetchOptions(): RequestInit {\r\n        this.initFetchOptions();\r\n        return this._options as RequestInit\r\n    }\r\n}"],"mappings":"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","names":[]}